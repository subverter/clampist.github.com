<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: OpenCV | lmst]]></title>
  <link href="http://lmst.me/blog/categories/opencv/atom.xml" rel="self"/>
  <link href="http://lmst.me/"/>
  <updated>2012-10-20T16:01:18+08:00</updated>
  <id>http://lmst.me/</id>
  <author>
    <name><![CDATA[clampist]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[OpenCV Basis]]></title>
    <link href="http://lmst.me/blog/2012/10/opencv-basis.html"/>
    <updated>2012-10-13T18:30:00+08:00</updated>
    <id>http://lmst.me/blog/2012/10/opencv-basis</id>
    <content type="html"><![CDATA[<h2>1.Load an image</h2>

<pre><code>In [1]: import cv

In [2]: im1 = cv.LoadImageM('foo.jpg')

In [3]: print type(im1)
&lt;type 'cv2.cv.cvmat'&gt;

In [4]: im2 = cv.LoadImage('foo.jpg')

In [5]: print type(im2)
&lt;type 'cv2.cv.iplimage'&gt;

In [6]: cv.SaveImage('foo1.png', im1)

In [7]: cv.SaveImage('foo2.png', im2)
</code></pre>

<p>可以看到<code>LoadImageM</code>得到的是一个<code>cvmat</code>图像，而<code>LoadImage</code>得到的是一个<code>iplimage</code>图像，两者均可以输出为图像</p>

<h2>2.About DPI PPI and Resolution(分辨率)</h2>

<ul>
<li>DPI 是指每一英吋长度中，取样或可显示或输出点的数目，英文为 Dots Per Inch（点每英寸）。主要说的是打印机。</li>
<li>PPI 是指每英寸的长度中所具有的像素，英文为 Pixels Per Inch（像素每英寸）。主要说的是显示器。</li>
</ul>


<p><img class="left" src="http://upload.wikimedia.org/wikipedia/commons/3/3d/DPI_and_PPI.png"></p>

<ul>
<li>分辨率(resolution)则泛指量测或显示系统对细节的分辨能力。</li>
<li>由分辨率中X或Y轴的数字除以该轴的长度(英寸)，可得该轴的像素每英寸密度。一般的像素是方形或接近方形，X与Y轴像素密度相同，但也有不相同的显示器。</li>
<li>同样分辨率的一张图像，在越小的屏幕上显示或者在越小的尺寸上打印出来，PPI或者DPI就越高。看起来就越清晰，越细腻。</li>
<li>也就是说，如果想要把一张大小为 800X600 且 PPI/DPI 为 200 图像，降低到 100 PPI/DPI ，在显示或打印<strong>尺寸不变</strong>的情况下，只需把大小变为原来的一半 400X300（假设X与Y轴像素密度相同）。</li>
<li>同时也可以说，单纯的高分辨率与 DPI/PPI 是扯不上关系的，只有高分辨率的图像体现在具体尺寸上，才能说它的 DPI/PPI。一张 2880x1800 图像在 15.4 英寸的显示器上会有很高的 PPI， 但在 42 英寸的显示器上 PPI 则很低。</li>
</ul>


<p>以下<code>halvedimage.py</code>是将图像大小变为一半</p>

<pre><code>#!/usr/bin/env python2
# -*- coding: utf-8 -*-

import cv
import sys

def main(img):
    im = cv.LoadImageM(img)
    halved = cv.CreateMat(im.rows / 2, im.cols / 2, cv.CV_8UC3)
    cv.Resize(im, halved)
    cv.SaveImage('halved_'+img, halved)

if __name__=='__main__':
    try:
        main(sys.argv[1])
    except IndexError:
        print '''Usage:
        halvedimage.py image.file'''
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Install OpenEXR for Python]]></title>
    <link href="http://lmst.me/blog/2012/10/install-openexr-for-python.html"/>
    <updated>2012-10-11T12:50:00+08:00</updated>
    <id>http://lmst.me/blog/2012/10/install-openexr-for-python</id>
    <content type="html"><![CDATA[<p>Using OpenEXR’s Python bindings we can make a simple image viewer.<br/>
So, we should install OpenEXR first, following <a href="http://www.excamera.com/sphinx/articles-openexr.html">OpenEXR bindings for Python</a><br/>
Make sure you have already installed OpenEXR's Prerequisite: Python 2.5+ and the OpenEXR C++ library(openexr).</p>

<pre><code>wget http://excamera.com/files/OpenEXR-1.2.0.tar.gz

tar zxvf OpenEXR-1.2.0.tar.gz

cd OpenEXR-1.2.0

(sudo python2 setup.py build)

sudo python2 setup.py install
</code></pre>

<p>Then, we can follow <a href="http://opencv.willowgarage.com/documentation/python/cookbook.html#opencv-and-openexr">OpenCV and OpenEXR</a></p>

<p>References: <a href="http://blog.csdn.net/ponder008/article/details/6592719">Python how to install setup.py</a></p>
]]></content>
  </entry>
  
</feed>
